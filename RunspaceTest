function Get-XamlObject {
	[CmdletBinding()]
	param(
		[Parameter(Position = 0,
			Mandatory = $true,
			ValuefromPipelineByPropertyName = $true,
			ValuefromPipeline = $true)]
		[Alias("FullName")]
		[System.String[]]$Path
	)

	BEGIN
	{
		Set-StrictMode -Version Latest
		$expandedParams = $null
		$PSBoundParameters.GetEnumerator() | ForEach-Object { $expandedParams += ' -' + $_.key + ' '; $expandedParams += $_.value }
		Write-Verbose "Starting: $($MyInvocation.MyCommand.Name)$expandedParams"
		$output = @{ }
		Add-Type -AssemblyName presentationframework, presentationcore
	} #BEGIN

	PROCESS {
		try
		{
			foreach ($xamlFile in $Path)
			{
				#Wait-Debugger
				#Change content of Xaml file to be a set of powershell GUI objects
				$inputXML = Get-Content -Path $xamlFile -ErrorAction Stop
				[xml]$xaml = $inputXML -replace 'mc:Ignorable="d"', '' -replace "x:N", 'N' -replace 'x:Class=".*?"', '' -replace 'd:DesignHeight="\d*?"', '' -replace 'd:DesignWidth="\d*?"', ''
				$tempform = [Windows.Markup.XamlReader]::Load((New-Object System.Xml.XmlNodeReader $xaml -ErrorAction Stop))

				#Grab named objects from tree and put in a flat structure using Xpath
				$namedNodes = $xaml.SelectNodes("//*[@*[contains(translate(name(.),'n','N'),'Name')]]")
				$namedNodes | ForEach-Object {
					$output.Add($_.Name, $tempform.FindName($_.Name))
				} #foreach-object
			} #foreach xamlpath
		} #try
		catch
		{
			throw $error[0]
		} #catch
	} #PROCESS

	END
	{
		Write-Output $output
		Write-Verbose "Finished: $($MyInvocation.Mycommand)"
	} #END
}

#Set Starting path and create Synchronised hash table to be read across multiple runspaces
$script:syncHash = [hashtable]::Synchronized(@{ })
$syncHash.path = 'H:\runspaceTesting\XAML.xaml'

#Load function into Sessionstate object for injection into runspace
$ssGetXamlObject = Get-Content Function:\Get-XamlObject -ErrorAction Stop
$ssfeGetXamlObject = New-Object System.Management.Automation.Runspaces.SessionStateFunctionEntry -ArgumentList 'Get-XamlObject', $ssGetXamlObject

#Add Function to session state
$InitialSessionState = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()
$InitialSessionState.Commands.Add($ssfeGetXamlObject)
			
$runspace = [runspacefactory]::CreateRunspace($InitialSessionState) #Add Session State to runspace at creation
$powerShell = [powershell]::Create()
$powerShell.runspace = $runspace
$runspace.ThreadOptions = "ReuseThread" #Helps to prevent memory leaks, show runspace config in console
$runspace.ApartmentState = "STA" #Needs to be in STA mode for WPF to work
$runspace.Open()
$runspace.SessionStateProxy.SetVariable("syncHash",$syncHash)

[void]$PowerShell.AddScript({

	$wpf = Get-ChildItem -Path $syncHash.path -Filter *.xaml -file | Where-Object { $_.Name -ne 'App.xaml' } | Get-XamlObject
	$wpf.GetEnumerator() | ForEach-Object {$script:SyncHash.add($_.name,$_.value)} #Add all WPF objects to synchash variable

	#Section Timer
		#We'll create a timer, this is for UI responsivness as Dispatcher.invoke is slow as a depressed slug!
		
		$updateBlock = {
        
		}

		$timer = New-Object System.Windows.Threading.DispatcherTimer
		# Which will fire 100 times every second        
		$timer.Interval = [TimeSpan]"0:0:0.01"
		# And will invoke the $updateBlock method         
		$timer.Add_Tick($updateBlock)
		# Now start the timer running        
		$timer.Start()
		if ($timer.IsEnabled)
		{
			Write-Output 'UI timer started'
		}

	#EndSection

#===========================================================================
# Actually make the objects work
#===========================================================================


# Log
#===========================================================================

$Log = "$psscriptroot\logs\Log.txt"

#===========================================================================
# Side Menu
#===========================================================================

})#>
$synchash.UserAnalysisButton.Add_Click({
    $synchash.TITLE.Content = "User Analysis"
    $synchash.UserAnalysisGrid.Visibility = "Visible"

    #$synchash.DashboardGrid.Visibility = "Hidden"
    $synchash.ADToolsGrid.Visibility = "Hidden"
    $synchash.ExchangeToolsGrid.Visibility = "Hidden"
    $synchash.LinksGrid.Visibility = "Hidden"
    $synchash.SuggestionsGrid.Visibility = "Hidden"
    $synchash.CitrixToolsGrid.Visibility = "Hidden"

})
 
#===========================================================================
# Dashboard
#===========================================================================
#$synchash.DashboardUsers.content = (get-aduser -filter *|where {$_.enabled -eq "True"}).count
#$synchash.DashboardComputers.content = (get-adcomputer -filter *|where {$_.enabled -eq "True"}).count

#===========================================================================
# User Analysis
#===========================================================================
$synchash.QUAGetButton.Add_Click({
$syncHash.watchnumber = $true #Tell if statement in timer to run code
					
			$runspace = [runspacefactory]::CreateRunspace()
			$powerShell = [powershell]::Create()
			$powerShell.runspace = $runspace
			$runspace.ThreadOptions = 'ReuseThread'
			$runspace.ApartmentState = 'STA'
            $runspace.name = "User Analysis"
			$runspace.Open()
			$runspace.SessionStateProxy.SetVariable("syncHash",$syncHash)

[void]$PowerShell.AddScript({
	
$synchash.test = "test"
	#Section Timer
		#We'll create a timer, this is for UI responsivness as Dispatcher.invoke is slow as a depressed slug!
		
		$updateBlock = {
			
		}

		$timer = New-Object System.Windows.Threading.DispatcherTimer
		# Which will fire 100 times every second        
		$timer.Interval = [TimeSpan]"0:0:0.01"
		# And will invoke the $updateBlock method         
		$timer.Add_Tick($updateBlock)
		# Now start the timer running        
		$timer.Start()
		if ($timer.IsEnabled)
		{
			Write-Output 'UI timer started'
		}

    $User = $synchash.QUATextBox.text
    echo "$(Get-date) - $env:USERNAME - User Analysis - Search = $($synchash.QUATextBox.text)" >> $log

##User Info analysis
$UI = get-user $user | select-object displayname,samaccountname,title,company,countryorregion,office,department,Mobilephone,phone

$synchash.uidisplayname.dispatcher.invoke(
[action]{$synchash.UIDisplayName.text = $UI.displayname})

$synchash.UISamaccountname.text = $UI.samaccountname
$synchash.UITitle.text = $UI.title
                      
	                    })

    $AsyncObject = $PowerShell.BeginInvoke()
})

$AsyncObject = $PowerShell.BeginInvoke()
